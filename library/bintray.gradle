apply plugin: 'com.github.dcendents.android-maven'

group = 'com.jingtuo.android'
version = '1.0.0'
//详见https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/android-maven-example/build.gradle
install {
    repositories.mavenInstaller {
        pom.project {
            name 'RecyclerView'
            description '基于RecyclerView整理了一些常用组件,RichRecyclerView,RefreshRecyclerView,MultiRecyclerView'
            url 'https://github.com/jingtuo/RecyclerView'
            inceptionYear '2016'

            packaging 'aar'
            groupId 'com.jingtuo.android'
            artifactId 'recyclerview'
            version '1.0.0'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection 'https://github.com/jingtuo/RecyclerView.git'
                url 'https://github.com/jingtuo/RecyclerView'

            }
            developers {
                developer {
                    name 'jingtuo'
                }
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    configurations = ['deployables'] //When uploading configuration files
    // - OR -
    publications = ['mavenStuff'] //When uploading Maven-based publication files
    // - AND/OR -
    filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
        from 'arbitrary-files'
        into 'standalone_files/level1'
        rename '(.+)\\.(.+)', '$1-suffix.$2'
    }

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = true //[Default: false] Whether to override version artifacts already published

    pkg {
        repo = 'maven'
        name = 'RecyclerView'
//        userOrg = ''//default bintray.user
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/jingtuo/RecyclerView'
        issueTrackerUrl = 'https://github.com/jingtuo/RecyclerView/issues'
        vcsUrl = 'https://github.com/jingtuo/RecyclerView.git'
        version {
            name = '1.0.0'
            desc = 'RecyclerView 1.0.0'
            released = new Date()
            vcsTag = '1.0.0'
            //Attributes to be attached to the version
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']

            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
                passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = false //[Default: true] Determines whether to sync the version to Maven Central.
                user = 'userToken' //OSS user token: mandatory
                password = 'paasword' //OSS user password: mandatory
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}