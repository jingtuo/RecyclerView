apply plugin: 'com.github.dcendents.android-maven'

// load properties
Properties properties = new Properties()
File localPropertiesFile = project.file("myinfo.properties");
if (localPropertiesFile.exists()) {
    properties.load(localPropertiesFile.newDataInputStream())
}
File projectPropertiesFile = project.file("library.properties");
if (projectPropertiesFile.exists()) {
    properties.load(projectPropertiesFile.newDataInputStream())
}

// read properties
def projectName = properties.getProperty("project.name")
def projectGroupId = properties.getProperty("project.groupId")
def projectArtifactId = properties.getProperty("project.artifactId")
def projectVersionName = android.defaultConfig.versionName
def projectPackaging = properties.getProperty("project.packaging")
def projectSiteUrl = properties.getProperty("project.siteUrl")
def projectGitUrl = properties.getProperty("project.gitUrl")

def developerId = properties.getProperty("developer.id")
def developerName = properties.getProperty("developer.name")
def developerEmail = properties.getProperty("developer.email")

def bintrayUser = properties.getProperty("bintray.user")
def bintrayApikey = properties.getProperty("bintray.apikey")

def javadocName = properties.getProperty("javadoc.name")

group = projectGroupId
version = '1.0.0'
//详见https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/android-maven-example/build.gradle
install {
    repositories.mavenInstaller {
        pom.project {
            name projectName
            groupId projectGroupId
            artifactId projectArtifactId
            version projectVersionName
            packaging projectPackaging
            description '基于RecyclerView整理了一些常用组件,RichRecyclerView,RefreshRecyclerView,MultiRecyclerView'

            url projectSiteUrl
            inceptionYear '2016'

            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            scm {
                connection projectGitUrl
                developerConnection projectGitUrl
                url projectSiteUrl
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
        }
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// javadoc configuration
javadoc {
    options{
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version projectVersionName
        links "http://docs.oracle.com/javase/7/docs/api"
        title javadocName
    }
}

bintray {
    user = bintrayUser
    key = bintrayApikey

    configurations = ['archives'] //When uploading configuration files
    // - OR -
//    publications = ['mavenStuff'] //When uploading Maven-based publication files
    // - AND/OR -
//    filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
//        from 'arbitrary-files'
//        into 'standalone_files/level1'
//        rename '(.+)\\.(.+)', '$1-suffix.$2'
//    }

    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = true //[Default: false] Whether to override version artifacts already published

    pkg {
        repo = 'maven'
        name = projectName
//        userOrg = ''//default bintray.user
        licenses = ['Apache-2.0']
        websiteUrl = projectSiteUrl
        issueTrackerUrl = 'https://github.com/jingtuo/RecyclerView/issues'
        vcsUrl = projectGitUrl
        version {
            name = projectVersionName
            desc = 'RecyclerView'
            released = new Date()
            vcsTag = projectVersionName
            //Attributes to be attached to the version
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']

            gpg {
                sign = false //Determines whether to GPG sign the files. The default is false
                passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
            }
            //Optional configuration for Maven Central sync of the version
            mavenCentralSync {
                sync = false
                //[Default: true] Determines whether to sync the version to Maven Central.
                user = 'userToken' //OSS user token: mandatory
                password = 'paasword' //OSS user password: mandatory
                close = '1'
                //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
}

